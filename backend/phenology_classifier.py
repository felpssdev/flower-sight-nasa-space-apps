"""
Classificador Fenol√≥gico para Culturas de Flora√ß√£o

Identifica o est√°gio fenol√≥gico atual da planta baseado em NDVI,
temperatura e √©poca do ano, determinando se √© poss√≠vel fazer
uma previs√£o assertiva de flora√ß√£o.

Est√°gios Fenol√≥gicos:
1. DORMANCY (Dorm√™ncia): NDVI < 0.25, temperatura baixa
2. BUD_BREAK (Brota√ß√£o): NDVI 0.25-0.40, aumento r√°pido
3. VEGETATIVE_GROWTH (Crescimento): NDVI 0.40-0.60
4. PRE_BLOOM (Pr√©-Flora√ß√£o): NDVI 0.60-0.75, estabiliza√ß√£o
5. BLOOMING (Flora√ß√£o): NDVI > 0.75, est√°vel alto
6. POST_BLOOM (P√≥s-Flora√ß√£o): NDVI alto, in√≠cio de decl√≠nio
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from enum import Enum


class PhenologyStage(Enum):
    """Est√°gios fenol√≥gicos de culturas perenes"""
    DORMANCY = "dormancy"
    BUD_BREAK = "bud_break"
    VEGETATIVE_GROWTH = "vegetative_growth"
    PRE_BLOOM = "pre_bloom"
    BLOOMING = "blooming"
    POST_BLOOM = "post_bloom"
    UNKNOWN = "unknown"


class PhenologyClassifier:
    """
    Classifica o est√°gio fenol√≥gico atual e determina
    se √© poss√≠vel fazer previs√£o assertiva de flora√ß√£o.
    
    Suporta hemisf√©rio norte e sul (ajusta meses automaticamente).
    """
    
    # Configura√ß√µes por cultura (HEMISF√âRIO NORTE)
    CROP_CONFIG = {
        'almond': {
            'bloom_month_range': (2, 4),  # Fev-Abr (HN)
            'chill_hours_required': 200,
            'ndvi_thresholds': {
                'dormancy': 0.25,
                'bud_break': 0.40,
                'vegetative': 0.60,
                'pre_bloom': 0.75
            }
        },
        'apple': {
            'bloom_month_range': (3, 5),  # Mar-Mai (HN)
            'chill_hours_required': 800,
            'ndvi_thresholds': {
                'dormancy': 0.25,
                'bud_break': 0.40,
                'vegetative': 0.60,
                'pre_bloom': 0.75
            }
        },
        'cherry': {
            'bloom_month_range': (3, 5),  # Mar-Mai
            'chill_hours_required': 900,
            'ndvi_thresholds': {
                'dormancy': 0.25,
                'bud_break': 0.40,
                'vegetative': 0.60,
                'pre_bloom': 0.75
            }
        }
    }
    
    def __init__(self, crop_type: str, latitude: float = 0.0):
        """
        Inicializa classificador para uma cultura espec√≠fica
        
        Args:
            crop_type: 'almond', 'apple' ou 'cherry'
            latitude: latitude da fazenda (para detectar hemisf√©rio)
        """
        if crop_type not in self.CROP_CONFIG:
            raise ValueError(f"Cultura n√£o suportada: {crop_type}")
        
        self.crop_type = crop_type
        self.latitude = latitude
        self.is_southern_hemisphere = latitude < 0
        
        # Copiar configura√ß√£o
        self.config = self.CROP_CONFIG[crop_type].copy()
        
        # AJUSTAR MESES DE FLORA√á√ÉO PARA HEMISF√âRIO SUL
        if self.is_southern_hemisphere:
            original_months = self.config['bloom_month_range']
            # Inverter esta√ß√µes: adicionar 6 meses (com wrap)
            adjusted_start = (original_months[0] + 6) % 12
            adjusted_end = (original_months[1] + 6) % 12
            # Se wrap (ex: out-dez = 10-12), manter ordem
            if adjusted_start == 0:
                adjusted_start = 12
            if adjusted_end == 0:
                adjusted_end = 12
            self.config['bloom_month_range'] = (adjusted_start, adjusted_end)
            print(f"üåé Hemisf√©rio Sul detectado! Meses ajustados: {original_months} ‚Üí {self.config['bloom_month_range']}")
    
    def classify_stage(self, data: pd.DataFrame) -> Dict:
        """
        Classifica o est√°gio fenol√≥gico atual
        
        Args:
            data: DataFrame com colunas 'ndvi', 'temperature', 'date'
        
        Returns:
            Dict com:
            - stage: PhenologyStage atual
            - confidence: confian√ßa da classifica√ß√£o (0-1)
            - can_predict: se pode fazer previs√£o assertiva
            - message: mensagem explicativa
            - estimated_bloom_window: janela estimada de flora√ß√£o (se dispon√≠vel)
        """
        
        # Dados recentes (√∫ltimos 30 dias)
        recent_data = data.tail(30).copy()
        
        # M√©tricas principais
        current_ndvi = recent_data['ndvi'].iloc[-1]
        avg_ndvi = recent_data['ndvi'].mean()
        ndvi_trend = self._calculate_trend(recent_data['ndvi'])
        
        avg_temp = recent_data['temperature'].mean() if 'temperature' in recent_data else None
        
        current_date = datetime.now()
        current_month = current_date.month
        
        # Classificar est√°gio
        stage, confidence = self._determine_stage(
            current_ndvi, avg_ndvi, ndvi_trend, avg_temp, current_month
        )
        
        # Determinar se pode prever
        can_predict = stage in [PhenologyStage.PRE_BLOOM, PhenologyStage.VEGETATIVE_GROWTH]
        
        # Gerar mensagem e janela de flora√ß√£o
        message, bloom_window = self._generate_response(
            stage, confidence, current_month, current_ndvi, ndvi_trend
        )
        
        return {
            'stage': stage.value,
            'stage_name': self._get_stage_name(stage),
            'confidence': float(confidence),
            'can_predict': can_predict,
            'message': message,
            'current_ndvi': float(current_ndvi),
            'avg_ndvi': float(avg_ndvi),
            'ndvi_trend': ndvi_trend,
            'estimated_bloom_window': bloom_window,
            'current_month': current_month
        }
    
    def _determine_stage(self, current_ndvi: float, avg_ndvi: float, 
                         ndvi_trend: str, avg_temp: Optional[float],
                         current_month: int) -> Tuple[PhenologyStage, float]:
        """Determina o est√°gio fenol√≥gico atual"""
        
        thresholds = self.config['ndvi_thresholds']
        bloom_months = self.config['bloom_month_range']
        
        confidence = 0.8  # Base
        
        # 1. DORM√äNCIA (NDVI muito baixo)
        if avg_ndvi < thresholds['dormancy']:
            # Alta confian√ßa se fora da √©poca de flora√ß√£o
            if not (bloom_months[0] <= current_month <= bloom_months[1]):
                confidence = 0.95
            return PhenologyStage.DORMANCY, confidence
        
        # 2. BROTA√á√ÉO (NDVI subindo rapidamente)
        if thresholds['dormancy'] <= avg_ndvi < thresholds['bud_break']:
            if ndvi_trend == 'increasing':
                confidence = 0.9
                return PhenologyStage.BUD_BREAK, confidence
            else:
                # NDVI baixo mas sem crescimento = ainda em dorm√™ncia
                return PhenologyStage.DORMANCY, 0.7
        
        # 3. CRESCIMENTO VEGETATIVO
        if thresholds['bud_break'] <= avg_ndvi < thresholds['vegetative']:
            return PhenologyStage.VEGETATIVE_GROWTH, 0.85
        
        # 4. PR√â-FLORA√á√ÉO (NDVI alto, crescimento desacelerando)
        if thresholds['vegetative'] <= avg_ndvi < thresholds['pre_bloom']:
            if ndvi_trend in ['stable', 'decreasing']:
                # Se estamos na √©poca de flora√ß√£o
                if bloom_months[0] <= current_month <= bloom_months[1]:
                    return PhenologyStage.PRE_BLOOM, 0.95
            return PhenologyStage.VEGETATIVE_GROWTH, 0.8
        
        # 5. FLORA√á√ÉO ou P√ìS-FLORA√á√ÉO
        if avg_ndvi >= thresholds['pre_bloom']:
            if bloom_months[0] <= current_month <= bloom_months[1] + 1:
                return PhenologyStage.BLOOMING, 0.9
            else:
                return PhenologyStage.POST_BLOOM, 0.85
        
        return PhenologyStage.UNKNOWN, 0.5
    
    def _calculate_trend(self, series: pd.Series) -> str:
        """Calcula tend√™ncia da s√©rie (increasing, decreasing, stable)"""
        if len(series) < 5:
            return 'stable'
        
        # Regress√£o linear simples
        x = np.arange(len(series))
        y = series.values
        
        # Coeficiente angular
        slope = np.polyfit(x, y, 1)[0]
        
        # Normalizar pela m√©dia
        relative_slope = slope / (np.mean(y) + 1e-6)
        
        if relative_slope > 0.01:  # 1% de mudan√ßa
            return 'increasing'
        elif relative_slope < -0.01:
            return 'decreasing'
        else:
            return 'stable'
    
    def _generate_response(self, stage: PhenologyStage, confidence: float,
                          current_month: int, current_ndvi: float,
                          ndvi_trend: str) -> Tuple[str, Optional[Dict]]:
        """Gera mensagem e janela de flora√ß√£o estimada"""
        
        bloom_months = self.config['bloom_month_range']
        
        # DORM√äNCIA
        if stage == PhenologyStage.DORMANCY:
            # Calcular meses at√© pr√≥xima flora√ß√£o
            if current_month < bloom_months[0]:
                months_until = bloom_months[0] - current_month
            else:
                months_until = (12 - current_month) + bloom_months[0]
            
            message = (
                f"üå± **Planta em Dorm√™ncia Invernal**\n\n"
                f"NDVI atual: {current_ndvi:.3f} (muito baixo)\n"
                f"Est√°gio: Sem atividade fotossint√©tica significativa\n\n"
                f"‚è≥ **Previs√£o n√£o dispon√≠vel**\n"
                f"Aguarde aproximadamente **{months_until} meses** para o in√≠cio da brota√ß√£o.\n"
                f"Flora√ß√£o esperada: **{self._get_month_name(bloom_months[0])}-{self._get_month_name(bloom_months[1])}**"
            )
            
            # Janela de flora√ß√£o (ano seguinte se necess√°rio)
            year = datetime.now().year
            if current_month > bloom_months[1]:
                year += 1
            
            bloom_window = {
                'earliest': datetime(year, bloom_months[0], 1).strftime('%Y-%m-%d'),
                'latest': datetime(year, bloom_months[1], 28).strftime('%Y-%m-%d'),
                'confidence': 'low'
            }
            
            return message, bloom_window
        
        # BROTA√á√ÉO
        elif stage == PhenologyStage.BUD_BREAK:
            weeks_until = 4  # Estimativa: 4 semanas de brota√ß√£o at√© flora√ß√£o
            
            message = (
                f"üåø **Planta em Fase de Brota√ß√£o**\n\n"
                f"NDVI atual: {current_ndvi:.3f} (crescimento ativo)\n"
                f"Tend√™ncia: {ndvi_trend.upper()}\n\n"
                f"‚ö†Ô∏è **Previs√£o preliminar**\n"
                f"Flora√ß√£o esperada em aproximadamente **{weeks_until} semanas**.\n"
                f"Previs√£o assertiva estar√° dispon√≠vel quando NDVI > 0.50"
            )
            
            bloom_window = {
                'earliest': (datetime.now() + timedelta(weeks=weeks_until-1)).strftime('%Y-%m-%d'),
                'latest': (datetime.now() + timedelta(weeks=weeks_until+2)).strftime('%Y-%m-%d'),
                'confidence': 'medium'
            }
            
            return message, bloom_window
        
        # CRESCIMENTO VEGETATIVO
        elif stage == PhenologyStage.VEGETATIVE_GROWTH:
            message = (
                f"üå≥ **Planta em Crescimento Vegetativo**\n\n"
                f"NDVI atual: {current_ndvi:.3f} (ativo)\n"
                f"Tend√™ncia: {ndvi_trend.upper()}\n\n"
                f"‚úÖ **Previs√£o dispon√≠vel**\n"
                f"A planta est√° pr√≥xima da flora√ß√£o. Use o modelo de ML para previs√£o assertiva."
            )
            
            return message, None
        
        # PR√â-FLORA√á√ÉO
        elif stage == PhenologyStage.PRE_BLOOM:
            message = (
                f"üå∏ **Planta em Pr√©-Flora√ß√£o**\n\n"
                f"NDVI atual: {current_ndvi:.3f} (muito alto)\n"
                f"Est√°gio: Bot√µes florais vis√≠veis\n\n"
                f"‚úÖ **Previs√£o de alta precis√£o dispon√≠vel**\n"
                f"Use o modelo de ML para previs√£o assertiva (margem de erro: ¬±3 dias)"
            )
            
            return message, None
        
        # FLORA√á√ÉO
        elif stage == PhenologyStage.BLOOMING:
            message = (
                f"üå∫ **Planta em Flora√ß√£o**\n\n"
                f"NDVI atual: {current_ndvi:.3f}\n"
                f"Status: Flores abertas\n\n"
                f"‚ÑπÔ∏è A flora√ß√£o j√° est√° ocorrendo!"
            )
            
            return message, None
        
        # P√ìS-FLORA√á√ÉO
        elif stage == PhenologyStage.POST_BLOOM:
            # Calcular meses at√© pr√≥xima flora√ß√£o
            if current_month < bloom_months[0]:
                months_until = bloom_months[0] - current_month
            else:
                months_until = (12 - current_month) + bloom_months[0]
            
            message = (
                f"üçÉ **Planta em P√≥s-Flora√ß√£o**\n\n"
                f"NDVI atual: {current_ndvi:.3f}\n"
                f"Status: Desenvolvimento de frutos\n\n"
                f"‚ÑπÔ∏è Flora√ß√£o j√° conclu√≠da. Pr√≥xima flora√ß√£o em {months_until} meses."
            )
            
            bloom_window = {
                'earliest': datetime(datetime.now().year + 1, bloom_months[0], 1).strftime('%Y-%m-%d'),
                'latest': datetime(datetime.now().year + 1, bloom_months[1], 28).strftime('%Y-%m-%d'),
                'confidence': 'low'
            }
            
            return message, bloom_window
        
        # DESCONHECIDO
        else:
            message = "‚ö†Ô∏è N√£o foi poss√≠vel determinar o est√°gio fenol√≥gico atual. Dados insuficientes."
            return message, None
    
    def _get_stage_name(self, stage: PhenologyStage) -> str:
        """Retorna nome em portugu√™s do est√°gio"""
        names = {
            PhenologyStage.DORMANCY: "Dorm√™ncia",
            PhenologyStage.BUD_BREAK: "Brota√ß√£o",
            PhenologyStage.VEGETATIVE_GROWTH: "Crescimento Vegetativo",
            PhenologyStage.PRE_BLOOM: "Pr√©-Flora√ß√£o",
            PhenologyStage.BLOOMING: "Flora√ß√£o",
            PhenologyStage.POST_BLOOM: "P√≥s-Flora√ß√£o",
            PhenologyStage.UNKNOWN: "Desconhecido"
        }
        return names.get(stage, "Desconhecido")
    
    def _get_month_name(self, month: int) -> str:
        """Retorna nome do m√™s em portugu√™s"""
        months = {
            1: "Janeiro", 2: "Fevereiro", 3: "Mar√ßo", 4: "Abril",
            5: "Maio", 6: "Junho", 7: "Julho", 8: "Agosto",
            9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
        }
        return months.get(month, "")

